directory = lapply(temp, read.delim)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
temp = list.files(pattern="*.csv")
directory = lapply(temp, read.delim)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(directory)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
path = directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
}
pollutantmean(specdata, "niterate", 1:10)
pollutantmean(specdata, "niterate", 1:10)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find.package("devtools")
#1000 simulated averages of 40 exponentials
expodist<-rep(NA,1000)
for (i in 1:1000){expodist[i] <- mean(rexp(40,0.2))}
hist(expodist,probability=T, main="Distribution of averages of samples drawn from exponential distribution", ylim=c(0, 0.6))
#Simulated density curve
lines(density(expodist))
#Normal distribution density curve
xfit <- seq(min(expodist), max(expodist), length=100)
yfit <- dnorm(xfit, mean=1/0.2, sd=(1/0.2/sqrt(40)))
lines(xfit, yfit, pch=22, col="red")
#Theoretical mean
abline(v=1/0.2,col="blue")
#Add legend
legend('topright', c("simulation", "theoretical"), lty=c(1,1), col=c("black", "red"))
#Sample Mean versus Theoretical Mean
mean(expodist)
1/0.2
#Sample Variance versus Theoretical Variance
var(expodist)
(1/0.2)^2/40
0.0936/(0.0936+0.088)
pnorm(24,mean=21, sd=5)
qnorm(0.9,mean=21,sd=5)
qnorm(0.1,mean=21,sd=5)
(2.33*300/40)^2
(30.69-32)/(4.31/6)
?qnorm
pnorm(1.82,mean=0,sd=1)
pnorm(-1.82,mean=0,sd=1)
30.69+c(-1,1)*1.645*4.31/6
9.4/sqrt(507)
(1.96*300/25)^2
pnorm((134-130)/(17/sqrt(35)),mean=0,sd=1)
pnorm((134-130)/(17/sqrt(35)),mean=0,sd=1,lower.tail=TRUE)
pnorm((134-130)/(17/sqrt(35)),mean=0,sd=1,lower.tail=FALSE)
415+c(-1,1)*220/sqrt(100)
415+c(-1,1)*1.96*220/sqrt(100)
q()
pop_mean <- 10
sam_mean <- 9.51
sd <- 4.65
n <- 40
z <- (pop_mean-sam_mean)/(sd/sqrt(n))
pnorm(z)
z <- (sam_mean-pop_mean)/(sd/sqrt(n))
pnorm(z)
0.91*0.02+0.09*0.9
0.09*0.9/0.0992
(9/2)^2
(1.28*18/4)^2
q()
0.0499-0.0364
0.5*0.5/(0.01/1.96)^2
q()
104*(15/104)
104*(89/104)
sqrt(0.36*0.64/50)
26*7/50
24*7/50
150*0.08
150*0.05
q()
76
76+0.35*72+0.43*30
qt(0.025,df=394)
q()
sum(dbinom(4:20,20,0.1))
dbinom(2,5,0.2)
dbinom(1,5,0.2)
dbinom(2,10,0.1)
dbinom(2,10,0.2)
q()
sqrt(0.11*0.89/100)
1.96*0.03+0.11
1-0.88^4
195528-1627
1627/828
193901/2
(1627/828)/(193901/2)
1627/2
193901/828
813.5*234.18
813.5/234.18
pf(3.47,828,2,lower.tail=FALSE)
SE <- sqrt(p(1-p)/3226)
p <- 0.2
SE <- sqrt(p(1-p)/3226)
SE <- sqrt(p*(1-p)/3226)
p <- 0.24
SE
SE <- sqrt(p*(1-p)/3226)
10/0.64
10/0.36
440*331/1293
46*112/625
0.05*0.93/(0.05*0.93+0.95*0.03)
1-((3819.99/15079.02)*(251/243))
q()
1.54/10000
0.08/10000
(0.08/10000)*100
q()
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
q()
3999+880*2
quit()
q()
pmlOriginal <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
summary(pmlOriginal)
describe(pmlOriginal)
install.packages("caret")
describe(pmlOriginal)
install.packages("Hmisc")
describe(pmlOriginal)
library(Hmisc)
describe(pmlOriginal)
sapply(pmlOriginal, class)
pmlFeature <- pmlOriginal[,-(1:7)]
is.na(pmlFeature)
colSums(is.na(pmlFeature))
nameOfFeature <- colnames([colSums(is.na(pmlFeature)) == 0])
nameOfFeature <- colnames(pmlFeature[colSums(is.na(pmlFeature)) == 0])
nameOfFeature
sumOfNA <- pmlFeatures[colSums(is.na(pmlFeatures))
sumOfNA <- colSums(is.na(pmlFeatures))
pmlFeatures <- pmlOriginal[,-(1:7)]
sumOfNA <- colSums(is.na(pmlFeatures))
nameOfFeatures <- colnames(sumOfNA == 0)
sumOfNA
nameOfFeatures <- colnames(pmlFeatures[sumOfNA == 0])
pmlFeatures <- pmlFeatures[nameOfFeatures]
pmlFeaturesPartition <- createDataPartition(y=pmlFeatures$classe, 0.7, list=FALSE )
pmlTrain <- pmlFeatures[pmlFeaturesPartition,]
pmlTest <- pmlFeatures[-pmlFeaturesPartition,]
library(caret)
pmlFeaturesPartition <- createDataPartition(y=pmlFeatures$classe, 0.7, list=FALSE )
pmlTrain <- pmlFeatures[pmlFeaturesPartition,]
pmlTest <- pmlFeatures[-pmlFeaturesPartition,]
featuresPartition <- createDataPartition(y=pmlFeatures$classe, 0.7, list=FALSE)
featuresPartition <- createDataPartition(y=pmlFeatures$classe, p=0.7, list=FALSE)
View(featuresPartition)
pmlTrain <- pmlFeatures[featuresPartition,]
pmlTest <- pmlFeatures[-featuresPartition,]
View(pmlTrain)
View(pmlFeatures)
View(pmlFeatures)
sumOfNA <- colSums(is.na(pmlFeatures))
sumOfNull <- colSums(is.null(pmlFeatures))
pmlOriginal <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings=c("#DIV/0!", "NA", ""))
for(i in c(8:ncol(pmlOriginal)-1)){
pmlOriginal[,i] = as.numeric(as.character(pmlOriginal[,i]))
}
pmlFeatures <- pmlOriginal[,-(1:7)]
sumOfNA <- colSums(is.na(pmlFeatures))
nameOfFeatures <- colnames(pmlFeatures[sumOfNA == 0])
pmlFeatures <- pmlFeatures[nameOfFeatures]
aggr(pmlFeatures, prop=TRUE, numbers=FALSE)
library(VIM)
aggr(pmlOriginal, prop=TRUE, numbers=FALSE)
sumOfNA <- colSums(is.na(pmlFeatures))
nameOfFeatures <- colnames(pmlFeatures[sumOfNA == 0])
pmlFeatures <- pmlFeatures[nameOfFeatures]
aggr(pmlFeatures, prop=TRUE, numbers=FALSE)
featuresPartition <- createDataPartition(y=pmlFeatures$classe, p=0.7, list=FALSE)
pmlTrain <- pmlFeatures[featuresPartition,]
pmlTest <- pmlFeatures[-featuresPartition,]
View(pmlTrain)
model <- randomForest(pmlTrain, pmlTrain$classe, ntree=500)
library(caret)
library(randomForest)
model <- randomForest(pmlTrain, pmlTrain$classe, ntree=500)
model
predictionsTest <- predict(model, pmlTest)
confusionMatrix(predictionsTest,predictionsTest$classe)
predictionsTest <- predict(model, newdata=pmlTest)
confusionMatrix(predictionsTest,pmlTest$classe)
pmlTest20 <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
predictionsTest20 <- predict(model, newdata=pmlTest20)
confusionMatrix(predictionsTest20,pmlTest20$classe)
View(pmlTest20)
predictionsTest20 <- predict(model, pmlTest20)
pmlTest20 <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.strings=c("#DIV/0!", "NA", ""))
sumOfNATest20 <- colSums(is.na(pmlTest20))
nameOfFeaturesTest20 <- colnames(pmlTest20[sumOfNATest20 == 0])
pmlTest20 <- pmlFeatures[nameOfFeaturesTest20]
pmlTest20 <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.strings=c("#DIV/0!", "NA", ""))
sumOfNATest20 <- colSums(is.na(pmlTest20))
nameOfFeaturesTest20 <- colnames(pmlTest20[sumOfNATest20 == 0])
pmlTest20 <- pmlTest20[nameOfFeaturesTest20]
predictionsTest20 <- predict(model, pmlTest20)
confusionMatrix(predictionsTest20,pmlTest20$classe)
View(pmlTest20)
View(pmlTest20)
View(pmlTest20)
pmlFeaturesTest20 <- pmlTest20[,-(1:7)]
View(pmlFeaturesTest20)
predictionsTest20 <- predict(model, pmlTest20)
predictionsTest20 <- predict(model, pmlFeaturesTest20)
View(pmlFeaturesTest20)
View(pmlTest)
pmlTest20 <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.strings=c("#DIV/0!", "NA", ""))
str(pmlTest20)
for(i in c(8:ncol(pmlTest20)-1)){
pmlTest20[,i] = as.numeric(as.character(pmlTest20[,i]))
}
predictionsTest20 <- predict(model, pmlTest20)
predictionsTest20 <- predict(model, pmlTest20, type="response")
sumOfNATest20 <- colSums(is.na(pmlTest20))
nameOfFeaturesTest20 <- colnames(pmlTest20[sumOfNATest20 == 0])
pmlTest20 <- pmlTest20[nameOfFeaturesTest20]
predictionsTest20 <- predict(model, pmlTest20, type="response")
pmlFeaturesTest20 <- pmlTest20[,-(1:7)]
predictionsTest20 <- predict(model, pmlTest20, type="response")
confusionMatrix(predictionsTest20, pmlTest20$classe)
View(pmlFeaturesTest20)
pmlFeaturesTest20 <- pmlFeaturesTest20[,-53]
predictionsTest20 <- predict(model, pmlTest20, type="response")
rfModel <- train(classe ~ ., method = "rf", data = pmlTrain, importance = T, trControl = trainControl(method = "cv", number = 10))
View(pmlTrain)
modelRF <- randomForest(classe ~ ., data=pmlTrain)
pmlTest20 <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.strings=c("#DIV/0!", "NA", ""))
for(i in c(8:ncol(pmlTest20)-1)){
pmlTest20[,i] = as.numeric(as.character(pmlTest20[,i]))
}
predictionsTest20 <- predict(modelRF, newdata=pmlTest20)
confusionMatrix(predictionsTest20, pmlTest20$classe)
predictionsTest20 <- as.character(predictionsTest20)
predictionsTest20 <- predict(modelRF, newdata=pmlTest20)
answer <- as.character(predictionsTest20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("C:/Users/ASUS/Documents/ApplicationInR/pmlCoursera/predictionAssignmentSubmission")
pml_write_files(answers)
pml_write_files(answer)
predictionsTest <- predict(modelRF, newdata=pmlTest)
confusionMatrix(predictionsTest,pmlTest$classe)
cor <- abs(sapply(colnames(pmlFeatures[, -ncol(pmlFeatures)]), function(x) cor(as.numeric(pmlFeatures[, x]), as.numeric(pmlFeatures$classe), method = "spearman")))
summary(cor)
plot(pmlFeatures[, names(which.max(cor))], pmlFeatures[, names(which.max(cor[-which.max(cor)]))], col = pmlFeatures$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
modelBoost <- boosting(classe ~.,data=pmlTrain,mfinal=10, coeflearn="Freund", boos=FALSE , control=rpart.control(maxdepth=3))
install.packages("adabag")
library(adabag)
modelBoost <- boosting(classe ~.,data=pmlTrain,mfinal=10, coeflearn="Freund", boos=FALSE , control=rpart.control(maxdepth=3))
modelBoost
boostTest = predict.boosting(modelBoost,newdata=pmlTest)
confusionMatrix(boostTest,pmlTest$classe)
boostTest <- predict.boosting(modelBoost, newdata=pmlTest)
boostTest$confusion
boostTest$error
plot(modelRF)
importance(modelRF)
varImpPlot(modelRF)
```{r, echo=False}
quit()
