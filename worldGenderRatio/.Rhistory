pred <- prediction(predictions = sms_results$prob_spam,
labels = sms_results$actual_type)
data(sms_results)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
svmfit=svm(churn~ ., data=trainset, prob=TRUE)
head(trainset)
head(diamonds)
library(ggplot2)
diamonds$is_expensive <- diamonds$price > 2400
is_test <- runif(nrow(diamonds)) > 0.75
train <- diamonds[is_test==FALSE,]
test <- diamonds[is_test==TRUE,]
summary(fit <- glm(is_expensive ~ carat + cut + clarity, data=train))
diamonds$is_expensive <- diamonds$price > 2400
is_test <- runif(nrow(diamonds)) > 0.75
train <- diamonds[is_test==FALSE,]
test <- diamonds[is_test==TRUE,]
summary(fit1 <- glm(is_expensive ~ carat + cut + clarity, data=train))
summary(fit2 <- glm(is_expensive ~ carat, data=train))
library(ROCR)
prob1 <- predict(fit1, newdata=test, type="response")
pred1 <- prediction(prob1, test$is_expensive)
perf1 <- performance(pred1, measure = "tpr", x.measure = "fpr")
prob2 <- predict(fit2, newdata=test, type="response")
pred2 <- prediction(prob2, test$is_expensive)
perf2 <- performance(pred2, measure = "tpr", x.measure = "fpr")
auc1 <- performance(pred1, measure = "auc")
auc1 <- auc1@y.values[[1]]
auc2 <- performance(pred2, measure = "auc")
auc2 <- auc2@y.values[[1]]
summary(fit1 <- glm(is_expensive ~ carat + cut + clarity, data=train))
summary(fit2 <- glm(is_expensive ~ cut, data=train))
library(ROCR)
prob1 <- predict(fit1, newdata=test, type="response")
pred1 <- prediction(prob1, test$is_expensive)
perf1 <- performance(pred1, measure = "tpr", x.measure = "fpr")
prob2 <- predict(fit2, newdata=test, type="response")
pred2 <- prediction(prob2, test$is_expensive)
perf2 <- performance(pred2, measure = "tpr", x.measure = "fpr")
auc1 <- performance(pred1, measure = "auc")
auc1 <- auc1@y.values[[1]]
auc2 <- performance(pred2, measure = "auc")
auc2 <- auc2@y.values[[1]]
summary(fit1 <- glm(is_expensive ~ carat + cut + clarity, data=train))
summary(fit2 <- glm(is_expensive ~ clarity, data=train))
library(ROCR)
prob1 <- predict(fit1, newdata=test, type="response")
pred1 <- prediction(prob1, test$is_expensive)
perf1 <- performance(pred1, measure = "tpr", x.measure = "fpr")
prob2 <- predict(fit2, newdata=test, type="response")
pred2 <- prediction(prob2, test$is_expensive)
perf2 <- performance(pred2, measure = "tpr", x.measure = "fpr")
auc1 <- performance(pred1, measure = "auc")
auc1 <- auc1@y.values[[1]]
auc2 <- performance(pred2, measure = "auc")
auc2 <- auc2@y.values[[1]]
summary(fit1 <- glm(is_expensive ~ carat + cut + clarity, data=train))
summary(fit2 <- glm(is_expensive ~ cut, data=train))
library(ROCR)
prob1 <- predict(fit1, newdata=test, type="response")
pred1 <- prediction(prob1, test$is_expensive)
perf1 <- performance(pred1, measure = "tpr", x.measure = "fpr")
prob2 <- predict(fit2, newdata=test, type="response")
pred2 <- prediction(prob2, test$is_expensive)
perf2 <- performance(pred2, measure = "tpr", x.measure = "fpr")
auc1 <- performance(pred1, measure = "auc")
auc1 <- auc1@y.values[[1]]
auc2 <- performance(pred2, measure = "auc")
auc2 <- auc2@y.values[[1]]
plot(perf1, colorize = TRUE)
plot(perf2, add = TRUE, colorize = TRUE)
abline(a = 0, b = 1, lwd = 2, lty = 2)
quit()
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram()
library(ggplot2)
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram()
namesTraining <- names(training)
training = adData[ inTrain,]
adData = data.frame(diagnosis,predictors)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
namesTraining <- names(training)
predictorsIL <- grep('^IL', namesTraining)
predictorsILTrain <- training[,predictorsIL]
dataframeTrain <- data.frame(training$diagnosis, predictorsILTrain)
glmFit <- train(diagnosis ~ ., method="glm", data=dataframeTrain)
dataframeTrain <- data.frame(diagnosis, predictorsILTrain)
namesTraining <- names(training)
predictorsIL <- grep('^IL', namesTraining)
predictorsILTrain <- training[,predictorsIL]
dataframeTrain <- data.frame(diagnosis, predictorsILTrain)
dataframeTrain <- data.frame(training$diagnosis, predictorsILTrain)
View(dataframeTrain)
glmFit <- train(training.diagnosis ~ ., method="glm", data=dataframeTrain)
glmPredictions <- predict(glmFit, newdata=testing)
confusionMatrix(glmPredictions, testing$diagnosis)
pcaFit <- train(diagnosis ~ ., method="glm", preProcess="pca", data=predictorsILTrain, trainControl(preProcOptions=list(thresh=0.8)))
pcaFit <- train(training.diagnosis ~ ., method="glm", preProcess="pca", data=predictorsILTrain, trainControl(preProcOptions=list(thresh=0.8)))
pcaFit <- train(training.diagnosis ~ ., method="glm", preProcess="pca", data=dataframeTrain, trainControl(preProcOptions=list(thresh=0.8)))
pcaFit <- train(training.diagnosis ~ ., method="glm", preProcess="pca", data=dataframeTrain, trainControl(preProcOptions=list(thresh=0.8)))
trControl=trainControl(preProcOptions=list(thresh=0.8)))
pcaFit <- train(training.diagnosis ~ .,
method="glm",
preProcess="pca",
data=dataframeTrain, trControl=trainControl(preProcOptions=list(thresh=0.8)))
pcaPredictions <- predict(pcaFit, newdata=testing)
confusionMatrix(pcaPredictions, testing$diagnosis)
quit()
install.packages("VIM")
library(VIM)
head(sleep)
str(sleep)
table(sleep$Exp)
table(sleep$Pred)
table(sleep$Danger)
aggr(sleep, combined=T)
aggr(sleep, combined=T, numbers=T, main='Missing Pattern of Sleep', ylab='')
aggr(sleep, combined=T, numbers=T, freq=F, main='Missing Pattern of Sleep', ylab='')
aggr(sleep, combined=T, numbers=F, freq=F, main='Missing Pattern of Sleep', ylab='')
aggr(sleep, combined=T, numbers=T, prop=F, main='Missing Pattern of Sleep', ylab='')
is.numeric(sleep)
colclass(sleep)
lapply(sleep, class)
sleepVarClass <- lapply(sleep, class)
sleepVarClass
sleepVarClass[1]
sleepVarClass[[1]]
sleepVarClass[[1:9]]
sleepVarClass[[1]:[9]]
sleepVarClass[[9]]
sleepVarCon <- sleepVarClass[[,"numeric"]]
class(sleep)
sapply(sleep, class)
sapply(sleep, class)[1]
sapply(sleep, class)[[1]
]
length(sleepVarClass)
is.numeric(sleepVarClass)
is.numeric(sleepVarClass[1])
is.numeric(sleepVarClass[2])
is.numeric(sleepVarClass[3])
is.numeric(sleepVarClass[[3])
is.numeric(sleepVarClass[[3]])
is.numeric(sleepVarClass[[4]])
is.numeric(sleepVarClass[[5]])
indexNum <- lapply(sleep, is.numeric)
indexNum
sleepNumVar <- sleep[,indexNum]
indexNum <- sapply(sleep, is.numeric)
indexNum
sleepNumVar <- sleep[, indexNum]
View(sleepNumVar)
indexNum <- sapply(sleep, is.numeric)
sleepNumVar <- sleep[, indexNum]
indexNum <- sapply(sleep, is.int)
indexNum <- sapply(sleep, is.integer)
sleepNumVar <- sleep[, indexNum]
indexInt <- sapply(sleep, is.integer)
sleepIntVar <- sleep[, indexInt]
sleepIntVar <- sleep[, -indexInt]
indexInt <- sapply(sleep, is.integer)
sleepIntVar <- sleep[, indexInt]
sleepNumVar <- sleep[, -indexInt]
indexInt
sleepNumVar <- sleep[, !=indexInt]
sleepNumVar <- !sleep[, indexInt]
sleepNumVar <- sleep[, !indexInt]
length(indexInt)
ncol(sleepIntVar)
ncol(sleepNumVar)
if (numCnt%2==0){
par(mfrow=c(numCnt/2, 2))
}else{
par(mfrow=c((numCnt+1)/2, 2))
}
if (numCnt%2==0)
par(mfrow=c(numCnt/2, 2))
else par(mfrow=c((numCnt+1)/2, 2))
numCnt <- ncol(sleepNumVar)
if (numCnt%2==0){
par(mfrow=c(numCnt/2, 2))
}else{
par(mfrow=c((numCnt+1)/2, 2))
}
numCnt <- ncol(sleepNumVar)
par(mfrow=c((numCnt+1)/2,2))
numVarName <- names(sleepNumVar)
for (name in numVarName){
hist(sleepNumVar[,name],
freq=FALSE,
col="skyblue",
xlab=name,
ylab='',
main=paste("Histogram of: ", name))
lines(density(sleepNumVar[,name], na.rm=TRUE), lwd=2, col="red")
}
intCnt <- ncol(sleepIntVar)
par(mfrow=c((intCnt+1)/2,2))
intVarName <- names(sleepIntVar)
for (name in intVarName){
barplot(table(sleepIntVar[,name], exclude=NULL),
xlab=name,
main=paste("Barplot of: ", name))
}
table(sleep$Pred)
histNum <- hist(sleep$BrainWgt,
freq=FALSE,
col="skyblue",
xlab=name,
ylab='',
main=paste("Histogram of: ", name))
lines(density(sleep$BrainWgt, na.rm=TRUE), lwd=2, col="red")
histNum <- hist(sleep$BrainWgt,
freq=FALSE,
col="skyblue",
xlab=name,
ylab='',
main=paste("Histogram of: ", name))
lines(density(sleep$BrainWgt, na.rm=TRUE), lwd=2, col="red")
library(leaflet)
m <- leaflet()
m <- addTiles(m)
m
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=174.768, lat=-36.852, popup="The birthplace of R")
m
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>% addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("Acetate.terrain")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("Acetate.terrain")
m %>% addProviderTiles("CartoDB.Positron")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addProviderTiles("CartoDB.Positron")
data(quakes)
summary(quakes)
head(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>% addMarkers(~long, ~lat, popup = ~paste(as.character(depth),as.character(mag)))
leaflet(data = quakes[1:20,]) %>% addTiles() %>% addMarkers(~long, ~lat, popup = ~paste("Depth:",as.character(depth),",","Magnitude:",as.character(mag)))
cities <- read.csv(textConnection("
City,Lat,Long,Pop
Boston,42.3601,-71.0589,645966
Hartford,41.7627,-72.6743,125017
New York City,40.7127,-74.0059,8406000
Philadelphia,39.9500,-75.1667,1553000
Pittsburgh,40.4397,-79.9764,305841
Providence,41.8236,-71.4222,177994
"))
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~City
)
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~City
)
quit()
setwd("C:/ApplicationInR/worldGenderRatio")
# Load 'rgdal' library in R
library(rgdal)
# Read shapefile of countries
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
names(unData)[1] <- 'NAME_LONG'
integratedData <- merge(countryShpData, unData, by=c("NAME_LONG"))
# Replace missing values with ' '
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
# Shown text on hover
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
# Column names of integratedData
colnames(integratedData)=c('COUNTRY','WOE_ID','SEX_RATIO','TEXT_ON_HOVER')
# Simplifying shapefile
library(rgeos)
countryShpSimplified<-gSimplify(countryShp,tol=0.1, topologyPreserve=TRUE)
# SpatialPolygonsDataFrame
rownames(integratedData) <- rownames(countryShpData)
spdf=SpatialPolygonsDataFrame(countryShpSimplified, data=integratedData)
summary(spdf)
View(integratedData)
str(integratedData)
integratedData$SEX_RATIO <- as.numeric(integratedData$SEX_RATIO)
str(integratedData)
setwd("C:/ApplicationInR/worldGenderRatio")
# Load 'rgdal' library in R
library(rgdal)
# Read shapefile of countries
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
names(unData)[1] <- 'NAME_LONG'
integratedData <- merge(countryShpData, unData, by=c("NAME_LONG"))
# Replace missing values with ' '
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
# Shown text on hover
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
# Column names of integratedData
colnames(integratedData)=c('COUNTRY','WOE_ID','SEX_RATIO','TEXT_ON_HOVER')
# Transform SEX_RATIO into numeric
integratedData$SEX_RATIO <- as.numeric(integratedData$SEX_RATIO)
# Simplifying shapefile
library(rgeos)
countryShpSimplified<-gSimplify(countryShp,tol=0.1, topologyPreserve=TRUE)
# SpatialPolygonsDataFrame
rownames(integratedData) <- rownames(countryShpData)
spdf=SpatialPolygonsDataFrame(countryShpSimplified, data=integratedData)
# Write GeoJSON
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
library(geojsonio)
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
colorCuts<-round(quantile(spdf$SEX_RATIO, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
colorCuts<-round(quantile(spdf$SEX_RATIO, probs = seq(0, 1, 0.20), na.rm = TRUE), 0)
summary(spdf)
sty<-styleGrad(prop="SEX_RATIO", breaks=colorCuts, right=FALSE, style.par="col", style.val=rev(heat.colors(6)), leg="Gender Ratio (2014)", lwd=1)
library(leaflet)
popup<-c("COUNTRY", "SEX_RATIO")
sty<-styleGrad(prop="SEX_RATIO", breaks=colorCuts, right=FALSE, style.par="col", style.val=rev(heat.colors(6)), leg="Gender Ratio (2014)", lwd=1)
library(leafletR)
install.packages("leafletR")
library(leafletR)
sty<-styleGrad(prop="SEX_RATIO", breaks=colorCuts, right=FALSE, style.par="col", style.val=rev(heat.colors(6)), leg="Gender Ratio (2014)", lwd=1)
sty<-styleGrad(prop="SEX_RATIO", breaks=colorCuts, right=FALSE, style.par="col", style.val=rev(heat.colors(5)), leg="Gender Ratio (2014)", lwd=1)
map<-leaflet(data=spdf, dest="C:/ApplicationInR/worldGenderRatio", style=sty, title="index", base.map="osm", incl.data=TRUE,  popup=popup)
countries <- readOGR("C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson", "OGRGeoJSON")
map <- leaflet(countries)
str(countryShp)
summary(countryShp)
getwd()
geojson <- readLines("C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
sexRatio <- sapply(geojson$features, function(feat) {
feat$properties$SEX_RATIO
})
pal <- colorQuantile("Greens", sexRatio)
sexRatio
pal <- colorQuantile("Greens", sexRatio, na.rm=TRUE)
pal <- colorQuantile("Greens", sexRatio, na.color="FFFFFF")
theftTaipei <- read.csv("C:/ApplicationInR/theftTaipei/theftTaipei.csv")
View(theftTaipei)
str(theftTaipei)
theftTaipei <- read.csv("C:/ApplicationInR/theftTaipei/theftTaipei.csv")
View(theftTaipei)
str(theftTaipei)
theftTaipei$MONTH <- as.yearmon(theftTaipei$DATE)
library(zoo)
theftTaipei$MONTH <- as.yearmon(theftTaipei$DATE)
View(theftTaipei)
theftTaipei$MONTH <- as.yearmon(format(theftTaipei$DATE))
View(theftTaipei)
theftTaipei$MONTH <- as.yearmon(format(theftTaipei$DATE, "%Y-%m"))
str(theftTaipei)
theftTaipei <- read.csv("C:/ApplicationInR/theftTaipei/theftTaipei.csv", stringsAsFactors=FALSE)
View(theftTaipei)
str(theftTaipei)
theftTaipei$DATE <- as.Date(theftTaipei$DATE, "%Y/%m/%d")
View(theftTaipei)
str(theftTaipei)
theftTaipei$MONTH <- as.yearmon(theftTaipei$DATE)
View(theftTaipei)
leaflet(theftTaipei) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~NO
)
leaflet(theftTaipei)
theftTaipei <- read.csv(textConnection("C:/ApplicationInR/theftTaipei/theftTaipei.csv", stringsAsFactors=FALSE))
"))
leaflet(theftTaipei) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~NO
)
View(unData)
summary(unData)
quantile(unData$Sex.ratio)
quantile(unData$Sex.ratio, na.rm=TRUE)
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
#names(unData)[1] <- 'NAME_LONG'
rownames(unData) <- rownames(countryShpData)
integratedData <- cbind(integratedData,unData[,2])
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
colnames(integratedData)=c('COUNTRY','WOE_ID','SEX_RATIO','TEXT_ON_HOVER')
integratedData$SEX_RATIO <- as.numeric(integratedData$SEX_RATIO)
countryShpSimplified<-gSimplify(countryShp,tol=0.1, topologyPreserve=TRUE)
spdf=SpatialPolygonsDataFrame(countryShpSimplified, data=integratedData)
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
library(geojsonio)
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/country.geojson')
View(integratedData)
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
#names(unData)[1] <- 'NAME_LONG'
rownames(unData) <- rownames(countryShpData)
#integratedData <- merge(countryShpData, unData, by=c("NAME_LONG"))
integratedData <- cbind(integratedData,unData[,2])
# Replace missing values with ' '
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
# Shown text on hover
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
View(integratedData)
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
#names(unData)[1] <- 'NAME_LONG'
rownames(unData) <- rownames(countryShpData)
#integratedData <- merge(countryShpData, unData, by=c("NAME_LONG"))
integratedData <- cbind(integratedData,unData[,2])
integratedData <- cbind(countryShpData,unData[,2])
View(integratedData)
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
colnames(integratedData)=c('COUNTRY','WOE_ID','SEX_RATIO','TEXT_ON_HOVER')
View(integratedData)
str(integratedData)
integratedData$SEX_RATIO <- as.numeric(integratedData$SEX_RATIO)
countryShpSimplified<-gSimplify(countryShp,tol=0.1, topologyPreserve=TRUE)
spdf=SpatialPolygonsDataFrame(countryShpSimplified, data=integratedData)
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
countryShp <- readOGR('countries', 'ne_10m_admin_0_countries')
# Read csv file
unData <- read.csv('data/UN_Gender-Relations.csv', head=T, sep=';')
# Integrate all required informations in a data frame
countryShpData <- countryShp@data[,c('WOE_ID','NAME_LONG')]
#names(unData)[1] <- 'NAME_LONG'
rownames(unData) <- rownames(countryShpData)
#integratedData <- merge(countryShpData, unData, by=c("NAME_LONG"))
integratedData <- cbind(countryShpData,unData[,2])
# Replace missing values with ' '
integratedData[which(is.na(integratedData[,3])==TRUE) ,3] <- ' '
# Shown text on hover
textOnHover <- c()
textOnHover[which(integratedData[,3]==' ')] <- 'No data provided by UN'
textOnHover[which(integratedData[,3]!=' ')] <- 'Women per 100 men'
integratedData <- cbind(integratedData,textOnHover)
View(integratedData)
colnames(integratedData)=c('WOE_ID','COUNTRY','SEX_RATIO','TEXT_ON_HOVER')
integratedData$SEX_RATIO <- as.numeric(integratedData$SEX_RATIO)
# Simplifying shapefile
library(rgeos)
countryShpSimplified<-gSimplify(countryShp,tol=0.1, topologyPreserve=TRUE)
# SpatialPolygonsDataFrame
# rownames(integratedData) <- rownames(countryShpData)
spdf=SpatialPolygonsDataFrame(countryShpSimplified, data=integratedData)
# Write GeoJSON
library(geojsonio)
geojson_write(spdf, file = 'C:/ApplicationInR/worldGenderRatio/geojson/countries.geojson')
quit()
